#!/usr/bin/env tsx
/**
 * Convert SVG Logo to PNG Script
 * 
 * This script converts the SVG logo to PNG format for better email client compatibility
 * 
 * Usage:
 * npm run convert:logo
 */

import { readFileSync, writeFileSync } from 'fs';
import { resolve } from 'path';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: resolve(process.cwd(), '.env.local') });

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message: string, color: string = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function logSection(title: string) {
  console.log(`\n${colors.blue}${'='.repeat(50)}${colors.reset}`);
  console.log(`${colors.blue}${title}${colors.reset}`);
  console.log(`${colors.blue}${'='.repeat(50)}${colors.reset}\n`);
}

async function convertSvgToPng() {
  logSection('Converting SVG Logo to PNG');
  
  try {
    // For now, let's create a simple text-based logo as PNG
    // Since we can't easily convert SVG to PNG without additional dependencies
    log('‚ö†Ô∏è  SVG to PNG conversion requires additional tools', colors.yellow);
    log('Options:', colors.cyan);
    log('1. Use online converter (https://svgtopng.com/)', colors.cyan);
    log('2. Use design software (Figma, Photoshop, etc.)', colors.cyan);
    log('3. Install sharp or puppeteer for programmatic conversion', colors.cyan);
    
    log('\nFor now, let\'s check if you have a PNG version of the logo...', colors.blue);
    
    // Check for existing PNG logo
    const publicDir = resolve(process.cwd(), 'public');
    const pngFiles = [
      '1_Narra Logo.png',
      'narra-logo.png',
      'logo.png',
      'Narra-Logo.png'
    ];
    
    for (const filename of pngFiles) {
      try {
        const filePath = resolve(publicDir, filename);
        readFileSync(filePath);
        log(`‚úÖ Found PNG logo: ${filename}`, colors.green);
        return filename;
      } catch {
        // File doesn't exist, continue
      }
    }
    
    log('‚ùå No PNG version found', colors.red);
    return null;
    
  } catch (error) {
    log(`‚ùå Error: ${error}`, colors.red);
    return null;
  }
}

async function createSimpleLogo() {
  logSection('Creating Simple Text Logo');
  
  log('Creating a simple text-based logo fallback...', colors.blue);
  
  // Create a simple HTML that can be used as fallback
  const logoHtml = `
<!DOCTYPE html>
<html>
<head>
  <style>
    body { 
      margin: 0; 
      padding: 20px; 
      font-family: 'Arial', sans-serif; 
      background: transparent;
      width: 170px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .logo { 
      font-size: 36px; 
      font-weight: bold; 
      color: #000; 
      letter-spacing: -1px;
    }
  </style>
</head>
<body>
  <div class="logo">Narra</div>
</body>
</html>
  `;
  
  const htmlPath = resolve(process.cwd(), 'public', 'narra-logo-fallback.html');
  writeFileSync(htmlPath, logoHtml.trim());
  
  log(`‚úÖ Created fallback HTML logo at: narra-logo-fallback.html`, colors.green);
  
  return 'narra-logo-fallback.html';
}

async function uploadAlternativeLogo() {
  logSection('Alternative Solution');
  
  log('Since SVG doesn\'t work in emails, here are your options:', colors.cyan);
  log('', colors.reset);
  log('1. üé® RECOMMENDED: Convert SVG to PNG manually:', colors.green);
  log('   - Open https://svgtopng.com/', colors.cyan);
  log('   - Upload your SVG file: public/1_Narra Logo.svg', colors.cyan);
  log('   - Set width to 340px (2x for retina)', colors.cyan);
  log('   - Download and save as: public/narra-logo.png', colors.cyan);
  log('   - Run: npm run upload:logo-png', colors.cyan);
  log('', colors.reset);
  log('2. üéØ QUICK FIX: Use text-only logo:', colors.yellow);
  log('   - We can update the email to use styled text instead', colors.cyan);
  log('   - This works in all email clients', colors.cyan);
  log('', colors.reset);
  log('3. üõ†Ô∏è  AUTOMATED: Install sharp package:', colors.blue);
  log('   - npm install sharp @types/sharp', colors.cyan);
  log('   - Update this script to use sharp for conversion', colors.cyan);
}

async function useTextLogo() {
  logSection('Using Text Logo Instead');
  
  log('Creating email with text-based logo...', colors.blue);
  
  // Update email images config to use text logo
  const updatedConfig = `// Email image URLs from Supabase storage
// Auto-generated by upload-email-images.ts script

export const EMAIL_IMAGES = {
  // LOGO: Use text instead of image for better email compatibility
  LOGO: null, // Will use text in email template
  HERO: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/hero.png',
  DISCOVER: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/discover.png',
  ORGANIZE: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/organize.png',
  SHARE: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/share.png',
  REFERRAL: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/referral.png'
} as const;

// Text logo configuration
export const EMAIL_LOGO = {
  TEXT: 'Narra',
  STYLES: {
    fontSize: '36px',
    fontWeight: 'bold',
    color: '#000000',
    fontFamily: '"Fira Sans", "Lucida Sans Unicode", "Lucida Grande", sans-serif',
    textAlign: 'center' as const,
    margin: '0',
    padding: '20px 0'
  }
} as const;
`;

  const configPath = resolve(process.cwd(), 'src/config/email-images.ts');
  writeFileSync(configPath, updatedConfig);
  
  log('‚úÖ Updated email images config with text logo', colors.green);
  log('üîÑ Now update the email template to use text instead of image', colors.cyan);
  
  return true;
}

async function main() {
  logSection('Logo Conversion Script');
  
  // Try to find existing PNG
  const pngLogo = await convertSvgToPng();
  
  if (!pngLogo) {
    await uploadAlternativeLogo();
    
    log('\nChoose your preferred solution:', colors.yellow);
    log('A) Convert SVG to PNG manually (RECOMMENDED)', colors.green);
    log('B) Use text logo instead (QUICK FIX)', colors.yellow);
    log('', colors.reset);
    
    // For now, let's implement the text logo solution
    log('Implementing text logo solution...', colors.blue);
    await useTextLogo();
    
    log('\n‚úÖ Text logo solution implemented!', colors.green);
    log('üìß The email will now use "Narra" text instead of an image', colors.cyan);
    log('üîÑ Run: npm run test:email -- your@email.com to test', colors.cyan);
  } else {
    log(`‚úÖ Found PNG logo: ${pngLogo}`, colors.green);
    log('üîÑ Upload it to Supabase storage manually or update the upload script', colors.cyan);
  }
}

// Run the script
main().catch(error => {
  log(`\n‚ùå Script error: ${error}`, colors.red);
  process.exit(1);
});