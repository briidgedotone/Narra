#!/usr/bin/env tsx
/**
 * Upload Payment Failed Icon Script
 * 
 * This script uploads the cross icon for payment failed emails
 * and updates the email-images.ts config file
 */

import { createClient } from '@supabase/supabase-js';
import { resolve } from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: resolve(process.cwd(), '.env.local') });

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message: string, color: string = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function uploadImageFromTempPath(tempPath: string, bucketName: string, fileName: string) {
  try {
    const fs = await import('fs/promises');
    const imageBuffer = await fs.readFile(tempPath);
    
    log(`üì§ Uploading ${fileName} to ${bucketName}...`, colors.cyan);
    
    const { data, error } = await supabase.storage
      .from(bucketName)
      .upload(fileName, imageBuffer, {
        contentType: 'image/png',
        upsert: true
      });

    if (error) {
      log(`‚ùå Error uploading ${fileName}: ${error.message}`, colors.red);
      return null;
    }

    // Get public URL
    const { data: publicUrl } = supabase.storage
      .from(bucketName)
      .getPublicUrl(fileName);

    log(`‚úÖ Uploaded ${fileName} successfully`, colors.green);
    return publicUrl.publicUrl;
  } catch (error) {
    log(`‚ùå Error reading file: ${error}`, colors.red);
    return null;
  }
}

async function updateEmailImagesConfig(successIconUrl: string, failedIconUrl: string) {
  log('\nüìù Updating email-images.ts config...', colors.cyan);
  
  const configContent = `// Email image URLs from Supabase storage
// Auto-generated by upload-failed-icon.ts script

export const EMAIL_IMAGES = {
  // LOGO: SVG not supported in emails, using text logo instead
  HERO: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/hero.png',
  DISCOVER: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/discover.png',
  ORGANIZE: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/organize.png',
  SHARE: 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/share.png',
  SUCCESS_ICON: '${successIconUrl}',
  FAILED_ICON: '${failedIconUrl}'
  // REFERRAL: Removed - not using referral functionality
} as const;

// Text logo configuration for email compatibility
export const EMAIL_LOGO = {
  TEXT: 'Narra',
  STYLES: {
    fontSize: '36px',
    fontWeight: 'bold',
    color: '#000000',
    fontFamily: '"Fira Sans", "Lucida Sans Unicode", "Lucida Grande", sans-serif',
    textAlign: 'center' as const,
    margin: '0',
    padding: '20px 0',
    letterSpacing: '-1px'
  }
} as const;
`;

  try {
    const fs = await import('fs/promises');
    const configPath = resolve(process.cwd(), 'src/config/email-images.ts');
    await fs.writeFile(configPath, configContent);
    log(`‚úÖ Updated email-images.ts with both success and failed icons`, colors.green);
  } catch (error) {
    log(`‚ùå Error updating config: ${error}`, colors.red);
  }
}

async function main() {
  log('üéØ Uploading payment failed icon...', colors.blue);
  
  const tempImagePath = process.argv[2];
  
  if (!tempImagePath) {
    log('‚ùå Please provide the path to the cross icon:', colors.red);
    log('   npx tsx scripts/upload-failed-icon.ts /path/to/cross.png', colors.yellow);
    return;
  }
  
  try {
    // Ensure email-assets bucket exists
    const { data: buckets } = await supabase.storage.listBuckets();
    const bucketExists = buckets?.some(bucket => bucket.name === 'email-assets');
    
    if (!bucketExists) {
      log('Creating email-assets bucket...', colors.cyan);
      await supabase.storage.createBucket('email-assets', { public: true });
    }
    
    // Upload the failed icon
    const failedIconUrl = await uploadImageFromTempPath(tempImagePath, 'email-assets', 'failed-icon.png');
    
    // Get existing success icon URL
    const successIconUrl = 'https://cvkqgduefcvkeagfvvgr.supabase.co/storage/v1/object/public/email-assets/success-icon.png';
    
    if (failedIconUrl) {
      await updateEmailImagesConfig(successIconUrl, failedIconUrl);
      
      log('\nüéâ Success! Next steps:', colors.green);
      log('1. Update payment-failed-email.tsx to use EMAIL_IMAGES.FAILED_ICON', colors.cyan);
      log('2. Test the updated email', colors.cyan);
    }
    
  } catch (error) {
    log(`‚ùå Script error: ${error}`, colors.red);
  }
}

main();