#!/usr/bin/env tsx
/**
 * Upload Email Images to Supabase Storage Script
 * 
 * This script uploads email template images to Supabase storage
 * so they can be used in emails with public URLs
 * 
 * Usage:
 * npm run upload:email-images
 */

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { resolve } from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: resolve(process.cwd(), '.env.local') });

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message: string, color: string = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function logSection(title: string) {
  console.log(`\n${colors.blue}${'='.repeat(50)}${colors.reset}`);
  console.log(`${colors.blue}${title}${colors.reset}`);
  console.log(`${colors.blue}${'='.repeat(50)}${colors.reset}\n`);
}

// Email images to upload
const emailImages = [
  { file: '1_Narra Logo.svg', bucket: 'email-assets', path: 'logo.svg' },
  { file: '2_main_referral_1.png', bucket: 'email-assets', path: 'hero.png' },
  { file: '3_1_point.png', bucket: 'email-assets', path: 'discover.png' },
  { file: '4_2-point.png', bucket: 'email-assets', path: 'organize.png' },
  { file: '5_3-point.png', bucket: 'email-assets', path: 'share.png' },
  { file: '6_GIRL_MONEY.png', bucket: 'email-assets', path: 'referral.png' }
];

async function createBucketIfNotExists(bucketName: string) {
  log(`Checking if bucket '${bucketName}' exists...`, colors.blue);
  
  const { data: buckets, error: listError } = await supabase.storage.listBuckets();
  
  if (listError) {
    log(`‚ùå Error listing buckets: ${listError.message}`, colors.red);
    return false;
  }

  const bucketExists = buckets?.some(bucket => bucket.name === bucketName);
  
  if (bucketExists) {
    log(`‚úÖ Bucket '${bucketName}' already exists`, colors.green);
    return true;
  }

  log(`Creating bucket '${bucketName}'...`, colors.yellow);
  
  const { error: createError } = await supabase.storage.createBucket(bucketName, {
    public: true,
    allowedMimeTypes: ['image/*'],
    fileSizeLimit: 5242880 // 5MB
  });

  if (createError) {
    log(`‚ùå Error creating bucket: ${createError.message}`, colors.red);
    return false;
  }

  log(`‚úÖ Bucket '${bucketName}' created successfully`, colors.green);
  return true;
}

async function uploadImage(imageConfig: typeof emailImages[0]) {
  const { file, bucket, path } = imageConfig;
  const filePath = resolve(process.cwd(), 'public', file);
  
  try {
    log(`üì§ Uploading ${file} as ${path}...`, colors.blue);
    
    // Read the file
    const fileBuffer = readFileSync(filePath);
    
    // Determine content type
    const contentType = file.endsWith('.svg') ? 'image/svg+xml' : 
                       file.endsWith('.png') ? 'image/png' : 
                       'image/jpeg';
    
    // Upload to Supabase storage
    const { data, error } = await supabase.storage
      .from(bucket)
      .upload(path, fileBuffer, {
        contentType,
        upsert: true
      });

    if (error) {
      log(`‚ùå Failed to upload ${file}: ${error.message}`, colors.red);
      return null;
    }

    // Get public URL
    const { data: publicUrlData } = supabase.storage
      .from(bucket)
      .getPublicUrl(path);

    log(`‚úÖ Uploaded successfully: ${publicUrlData.publicUrl}`, colors.green);
    return publicUrlData.publicUrl;
    
  } catch (error) {
    log(`‚ùå Error uploading ${file}: ${error}`, colors.red);
    return null;
  }
}

async function generateImageConstants(uploadedImages: Record<string, string>) {
  logSection('Generating Image Constants');
  
  const constantsCode = `// Email image URLs from Supabase storage
// Auto-generated by upload-email-images.ts script

export const EMAIL_IMAGES = {
  LOGO: '${uploadedImages.logo}',
  HERO: '${uploadedImages.hero}',
  DISCOVER: '${uploadedImages.discover}',
  ORGANIZE: '${uploadedImages.organize}',
  SHARE: '${uploadedImages.share}',
  REFERRAL: '${uploadedImages.referral}'
} as const;
`;

  const constantsPath = resolve(process.cwd(), 'src/config/email-images.ts');
  
  try {
    const fs = await import('fs/promises');
    await fs.writeFile(constantsPath, constantsCode);
    log(`‚úÖ Generated image constants at: ${constantsPath}`, colors.green);
  } catch (error) {
    log(`‚ùå Failed to write constants file: ${error}`, colors.red);
  }
}

async function main() {
  logSection('Email Images Upload Script');
  
  // Check environment variables
  if (!supabaseUrl || !supabaseServiceKey) {
    log('‚ùå Missing required environment variables:', colors.red);
    log('  - NEXT_PUBLIC_SUPABASE_URL', colors.red);
    log('  - SUPABASE_SERVICE_ROLE_KEY', colors.red);
    process.exit(1);
  }

  // Create bucket if it doesn't exist
  const bucketReady = await createBucketIfNotExists('email-assets');
  if (!bucketReady) {
    log('‚ùå Failed to create/access bucket', colors.red);
    process.exit(1);
  }

  // Upload all images
  const uploadedImages: Record<string, string> = {};
  let successCount = 0;

  for (const imageConfig of emailImages) {
    const publicUrl = await uploadImage(imageConfig);
    if (publicUrl) {
      const key = imageConfig.path.replace('.svg', '').replace('.png', '');
      uploadedImages[key] = publicUrl;
      successCount++;
    }
  }

  // Generate constants file
  if (Object.keys(uploadedImages).length > 0) {
    await generateImageConstants(uploadedImages);
  }

  // Summary
  logSection('Upload Summary');
  log(`‚úÖ Successfully uploaded: ${successCount}/${emailImages.length} images`, colors.green);
  
  if (successCount === emailImages.length) {
    log('üéâ All images uploaded successfully!', colors.green);
    log('üìù Image constants generated in src/config/email-images.ts', colors.cyan);
    log('üîÑ Update your email template to use these constants', colors.cyan);
  } else {
    log('‚ö†Ô∏è  Some images failed to upload. Check the errors above.', colors.yellow);
  }
}

// Run the script
main().catch(error => {
  log(`\n‚ùå Script error: ${error}`, colors.red);
  process.exit(1);
});