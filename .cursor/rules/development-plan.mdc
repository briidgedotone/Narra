---
description: 
globs: 
alwaysApply: true
---
# Use Narra - Detailed Development Plan

## üéØ **Project Overview**
This development plan breaks down the Use Narra SaaS platform into manageable phases, following MVP principles and ensuring a systematic approach to building all features.

---

## **Phase 1: Foundation & Setup** üèóÔ∏è

### **1.1 Project Initialization**
- [x] Initialize Next.js 14+ project with App Router
- [x] Configure TypeScript with strict mode
- [x] Set up ESLint and Prettier configurations
- [x] Install and configure TailwindCSS
- [x] Install ShadCN UI components
- [x] Set up folder structure (`/app`, `/components`, `/lib`, `/types`)
- [x] Configure environment variables structure
- [x] Set up Git hooks and branch protection

### **1.2 Development Environment**
- [x] Create development database (local PostgreSQL or Supabase)
- [x] Set up Redis for caching (local or cloud)
- [x] Configure VS Code settings and extensions
- [x] Set up debugging configuration
- [x] Create development scripts in `package.json`
- [x] Set up hot reload and error handling

### **1.3 Core Dependencies**
- [x] Install Clerk for authentication
- [x] Install Prisma or Supabase client
- [x] Install Stripe SDK
- [x] Install necessary UI libraries (Lucide icons, etc.)
- [x] Install form handling libraries (React Hook Form, Zod)
- [x] Install state management tools if needed

---

## **Phase 2: Database & Models** üíæ

### **2.1 Database Schema Design**
- [x] Create `users` table with Clerk integration
- [x] Create `profiles` table for social media accounts
- [x] Create `posts` table for social media content
- [x] Create `folders` table for organization
- [x] Create `boards` table for content curation
- [x] Create `follows` table for user-profile relationships
- [x] Create `subscriptions` table for Stripe integration
- [x] Create junction tables for many-to-many relationships

### **2.2 Database Setup**
- [x] Set up Prisma schema or Supabase tables
- [x] Configure database relationships and constraints
- [x] Create database migrations
- [x] Set up database indexes for performance
- [x] Configure row-level security (if using Supabase)
- [x] Create seed data for development

### **2.3 Data Models & Types**
- [x] Create TypeScript interfaces for all data models
- [x] Set up Prisma client or Supabase types
- [x] Create validation schemas with Zod
- [x] Set up database connection utilities
- [x] Create CRUD utilities for each model

---

## **Phase 3: Authentication & Authorization** üîê

### **3.1 Clerk Integration**
- [x] Set up Clerk application and API keys
- [x] Configure Clerk middleware for Next.js
- [x] Create authentication pages (sign-in, sign-up)
- [x] Set up social authentication providers
- [x] Configure user roles (user, admin)
- [x] Set up user synchronization with database

### **3.2 Route Protection**
- [x] Create authentication middleware
- [x] Protect dashboard and app routes
- [x] Create role-based access control
- [x] Set up redirect logic for unauthorized users
- [x] Handle authentication errors and edge cases

### **3.3 User Management**
- [x] Create user profile management
- [x] Set up user preferences storage
- [x] Create user session handling
- [x] Implement sign-out functionality
- [x] Set up user data synchronization

---

## **Phase 4: Core UI Components** üé®

### **4.1 Design System Setup**
- [x] Create base color palette and design tokens
- [x] Set up typography system
- [x] Create spacing and layout utilities
- [x] Configure responsive breakpoints
- [x] Set up component variants system

### **4.2 Shared Components**
- [x] Create Layout component with sidebar navigation
- [x] Build Header component with authentication state
- [x] Create Loading and Error boundary components
- [x] Build Modal and Dialog components
- [x] Create Form components with validation
- [x] Build Button and Input component variants

### **4.3 Specialized Components**
- [x] Create Pinterest-style Post Grid component
- [x] Build Post Card component with hover states
- [x] Create Profile Card component
- [x] Build Board Card component
- [x] Create Folder Tree component
- [x] Build Search and Filter components

---

## **Phase 5: Landing Page & Marketing** üõ¨

### **5.1 Landing Page Structure**
- [ ] Create responsive header with navigation
- [ ] Build hero section with value proposition
- [ ] Create features section with benefits
- [ ] Build pricing section with plan comparison
- [ ] Add testimonials and social proof section
- [ ] Create footer with links and legal pages

### **5.2 Marketing Pages**
- [ ] Create Privacy Policy page
- [ ] Build Terms of Service page
- [ ] Create Contact page
- [ ] Build About page
- [ ] Set up FAQ section
- [ ] Create blog structure (optional for MVP)

### **5.3 SEO & Performance**
- [ ] Configure Next.js metadata and SEO
- [ ] Set up Open Graph and Twitter cards
- [ ] Optimize images and assets
- [ ] Implement analytics tracking
- [ ] Set up performance monitoring

---

## **Phase 6: User Dashboard** üè†

### **6.1 Dashboard Layout**
- [x] Create dashboard layout with sidebar
- [x] Build responsive navigation system
- [x] Create breadcrumb navigation
- [x] Set up dashboard routing structure
- [x] Implement active navigation states

### **6.2 Dashboard Content**
- [x] Create welcome message and onboarding
- [x] Build quick stats cards
- [x] Create recent activity feed
- [x] Build quick action buttons
- [ ] Set up dashboard customization options

### **6.3 Navigation & UX**
- [ ] Implement mobile-responsive sidebar
- [ ] Create search functionality in header
- [ ] Build notification system
- [ ] Set up user menu and profile dropdown
- [ ] Implement keyboard navigation

---

## **Phase 7: Content Discovery** üîç

### **7.1 ScrapeCreators Integration**
- [ ] Set up ScrapeCreators API client
- [ ] Create API wrapper functions
- [ ] Implement error handling and retries
- [ ] Set up response caching with Redis
- [ ] Create rate limiting for API calls

### **7.2 Discovery Page**
- [ ] Build search interface for handles/links
- [ ] Create profile preview component
- [ ] Implement post filtering system
- [ ] Build Pinterest-style post grid
- [ ] Add infinite scroll or pagination

### **7.3 Search & Filter Features**
- [ ] Implement date range filtering
- [ ] Add likes and comments filtering
- [ ] Create sort options (recency, popularity)
- [ ] Build advanced search options
- [ ] Set up search result caching

---

## **Phase 8: Post Management** üîé

### **8.1 Post Detail View**
- [ ] Create post detail modal component
- [ ] Build tabbed interface (Overview | Transcript)
- [ ] Implement embed player with custom overlay
- [ ] Create post metrics display
- [ ] Build social sharing functionality

### **8.2 Post Actions**
- [ ] Implement "Save to Board" functionality
- [ ] Create "Follow Profile" action
- [ ] Build "Copy Transcript" feature
- [ ] Add post sharing capabilities
- [ ] Implement post reporting system

### **8.3 Transcript Features**
- [ ] Create transcript display component
- [ ] Implement copy-to-clipboard functionality
- [ ] Build transcript search (future enhancement)
- [ ] Set up transcript formatting
- [ ] Add timestamp navigation

---

## **Phase 9: Boards & Organization** üìÅ

### **9.1 Folder System**
- [ ] Create folder CRUD operations
- [ ] Build folder tree navigation
- [ ] Implement drag-and-drop functionality
- [ ] Create folder sharing capabilities
- [ ] Set up folder permissions

### **9.2 Board Management**
- [ ] Build board creation and editing
- [ ] Create board grid layout
- [ ] Implement post organization within boards
- [ ] Build board sharing functionality
- [ ] Create public board URLs with unique IDs

### **9.3 Organization Features**
- [ ] Implement bulk post operations
- [ ] Create board templates
- [ ] Build board collaboration features
- [ ] Set up board export functionality
- [ ] Add board analytics and insights

---

## **Phase 10: Following System** üë§

### **10.1 Follow Management**
- [ ] Create follow/unfollow functionality
- [ ] Build followed profiles list
- [ ] Implement profile relationship tracking
- [ ] Set up follow notifications
- [ ] Create following analytics

### **10.2 Content Updates**
- [ ] Set up daily content refresh cron job
- [ ] Build background job processing
- [ ] Implement new content notifications
- [ ] Create content update tracking
- [ ] Set up automatic post fetching

### **10.3 Following Page**
- [ ] Build following page layout
- [ ] Create latest posts grid
- [ ] Implement profile filtering
- [ ] Build batch unfollow functionality
- [ ] Set up content refresh indicators

---

## **Phase 11: Collections & Curation** üìö

### **11.1 Admin Curation System**
- [ ] Create admin dashboard access
- [ ] Build curated collection management
- [ ] Implement bulk post insertion
- [ ] Create collection categorization
- [ ] Set up content moderation tools

### **11.2 Collections Display**
- [ ] Build collections page layout
- [ ] Create collection grid component
- [ ] Implement collection filtering
- [ ] Build collection detail views
- [ ] Set up collection sharing

### **11.3 User Interaction**
- [ ] Implement save from collections
- [ ] Create collection browsing
- [ ] Build collection search
- [ ] Set up collection recommendations
- [ ] Add collection analytics

---

## **Phase 12: Settings & Profile** ‚öôÔ∏è

### **12.1 Profile Management**
- [ ] Create profile editing interface
- [ ] Build avatar upload functionality
- [ ] Implement profile information updates
- [ ] Set up profile privacy settings
- [ ] Create profile deletion options

### **12.2 User Preferences**
- [ ] Build notification preferences
- [ ] Create email frequency settings
- [ ] Implement theme and UI preferences
- [ ] Set up data export functionality
- [ ] Build account security settings

### **12.3 Account Management**
- [ ] Create account deletion process
- [ ] Build data download functionality
- [ ] Implement account recovery
- [ ] Set up support ticket system
- [ ] Create feedback collection

---

## **Phase 13: Payment Integration** üí≥

### **13.1 Stripe Setup**
- [ ] Configure Stripe API keys and products
- [ ] Set up subscription plans matching pricing
- [ ] Create Stripe customer portal integration
- [ ] Implement webhook handlers
- [ ] Set up subscription status tracking

### **13.2 Payment Flow**
- [ ] Build plan selection interface
- [ ] Create Stripe Checkout integration
- [ ] Implement payment success/failure handling
- [ ] Set up subscription management
- [ ] Build billing history display

### **13.3 Subscription Management**
- [ ] Create subscription status checking
- [ ] Implement feature gating based on plans
- [ ] Build upgrade/downgrade functionality
- [ ] Set up subscription renewal handling
- [ ] Create cancellation flow

---

## **Phase 14: Email Integration** üí¨

### **14.1 Loops Email Setup**
- [ ] Configure Loops API integration
- [ ] Set up email list management
- [ ] Create user segmentation
- [ ] Build email preference handling
- [ ] Set up unsubscribe management

### **14.2 Email Automation**
- [ ] Create onboarding email sequence
- [ ] Build welcome email templates
- [ ] Set up plan-specific email flows
- [ ] Implement notification emails
- [ ] Create email analytics tracking

### **14.3 Email Management**
- [ ] Build email preference interface
- [ ] Create email history tracking
- [ ] Implement email scheduling
- [ ] Set up email template management
- [ ] Build email testing tools

---

## **Phase 15: Admin Dashboard** üßë‚Äçüíº

### **15.1 Admin Interface**
- [ ] Create admin role verification
- [ ] Build admin dashboard layout
- [ ] Implement user management interface
- [ ] Create content moderation tools
- [ ] Set up system monitoring dashboard

### **15.2 Content Management**
- [ ] Build bulk content operations
- [ ] Create content curation tools
- [ ] Implement content analytics
- [ ] Set up content flagging system
- [ ] Build content export tools

### **15.3 System Administration**
- [ ] Create system health monitoring
- [ ] Build database management tools
- [ ] Implement cache management
- [ ] Set up backup and recovery
- [ ] Create performance analytics

---

## **Phase 16: Testing & Quality Assurance** üß™

### **16.1 Unit Testing**
- [ ] Set up Jest and React Testing Library
- [ ] Write component tests
- [ ] Create API endpoint tests
- [ ] Build database operation tests
- [ ] Set up test coverage reporting

### **16.2 Integration Testing**
- [ ] Test authentication flows
- [ ] Test payment integration
- [ ] Test external API integrations
- [ ] Test email functionality
- [ ] Test background jobs

### **16.3 End-to-End Testing**
- [ ] Set up Playwright or Cypress
- [ ] Create user journey tests
- [ ] Test responsive design
- [ ] Test cross-browser compatibility
- [ ] Set up automated testing pipeline

---

## **Phase 17: Performance Optimization** üöÄ

### **17.1 Frontend Optimization**
- [ ] Implement code splitting
- [ ] Set up lazy loading for images
- [ ] Optimize bundle size
- [ ] Implement caching strategies
- [ ] Set up performance monitoring

### **17.2 Backend Optimization**
- [ ] Optimize database queries
- [ ] Implement API caching
- [ ] Set up database indexing
- [ ] Optimize background jobs
- [ ] Implement rate limiting

### **17.3 Infrastructure Optimization**
- [ ] Set up CDN for static assets
- [ ] Optimize image delivery
- [ ] Implement edge caching
- [ ] Set up database connection pooling
- [ ] Configure auto-scaling

---

## **Phase 18: Deployment & Launch** üöÄ

### **18.1 Production Setup**
- [ ] Configure production environment variables
- [ ] Set up production database
- [ ] Configure production Redis instance
- [ ] Set up production Stripe keys
- [ ] Configure production email settings

### **18.2 Deployment Pipeline**
- [ ] Set up Vercel deployment
- [ ] Configure CI/CD pipeline
- [ ] Set up environment branching
- [ ] Configure database migrations
- [ ] Set up monitoring and alerting

### **18.3 Launch Preparation**
- [ ] Conduct final testing
- [ ] Set up analytics and tracking
- [ ] Configure error reporting
- [ ] Prepare launch documentation
- [ ] Set up customer support system

---

## **üéØ MVP Priority Levels**

### **Critical (Must Have for Launch)**
- Phases 1-6: Foundation through Dashboard
- Phase 7: Basic Discovery functionality
- Phase 8: Basic Post Detail
- Phase 13: Payment integration
- Phase 18: Deployment

### **Important (Launch Week)**
- Phase 9: Basic Boards functionality
- Phase 10: Basic Following system
- Phase 12: Basic Settings
- Phase 14: Basic Email integration

### **Nice to Have (Post-Launch)**
- Phase 11: Collections system
- Phase 15: Admin Dashboard
- Advanced features in each phase

---

## **üìã Development Guidelines**

### **Best Practices**
- Follow TypeScript strict mode throughout
- Implement proper error handling at each step
- Write tests for critical functionality
- Use environment variables for all secrets
- Follow the established project structure
- Implement proper logging and monitoring

### **Quality Gates**
- Code review required for all changes
- Tests must pass before merging
- Performance benchmarks must be met
- Security review for authentication and payments
- Accessibility standards compliance
- Mobile responsiveness testing

This development plan provides a comprehensive roadmap for building Use Narra systematically. Each phase builds upon the previous ones, ensuring a solid foundation and MVP-focused approach.
