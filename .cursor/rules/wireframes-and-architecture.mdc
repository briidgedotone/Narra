---
description: 
globs: 
alwaysApply: true
---
# Use Narra - Wireframes & Project Architecture

## 📋 Wireframes Overview

The wireframes above show the complete user interface structure for Use Narra, covering all major user journeys:

### **🛬 Landing Page**
- Clean, conversion-focused design
- Clear value proposition and pricing
- Strong call-to-action placement
- Social proof and testimonials

### **🏠 Dashboard**
- Central hub with quick access to all features
- Sidebar navigation for main sections
- Quick stats and recent activity
- Action-oriented design

### **🔍 Discovery Page**
- Search-first interface
- Profile preview with key metrics
- Pinterest-style post grid
- Advanced filtering options

### **🔎 Post Detail View**
- Modal-based design for seamless browsing
- Tabbed interface (Overview | Transcript)
- Clear save and follow actions
- Mobile-optimized layout

### **📁 Boards & Folders**
- Tree-view navigation
- Drag-and-drop functionality
- Visual board previews
- Sharing and organization tools

### **👤 Following Page**
- Profile management interface
- Latest posts from followed accounts
- Auto-refresh status indicators
- Easy unfollow actions

### **⚙️ Settings**
- Organized settings sections
- Subscription management integration
- Email preference controls
- Profile customization

---

## 🏗️ Technical Architecture

### **Frontend Architecture**
- **Framework**: Next.js 14+ with App Router
- **Language**: TypeScript (strict mode)
- **Styling**: TailwindCSS + ShadCN UI components
- **State Management**: React Server Components + Client Components
- **Responsive**: Mobile-first design approach

### **Backend Architecture**
- **API Layer**: Next.js API Routes + Server Actions
- **Authentication**: Clerk integration with middleware
- **Database**: PostgreSQL via Supabase/Prisma
- **Caching**: Redis for performance optimization
- **Background Jobs**: Cron jobs for content refresh

### **External Integrations**
- **ScrapeCreators**: Social media data fetching
- **Stripe**: Payment processing and subscription management
- **Loops**: Email marketing and onboarding
- **Clerk**: User authentication and management

### **Deployment Infrastructure**
- **Frontend**: Vercel with Edge Network
- **Database**: Supabase managed PostgreSQL
- **Caching**: Redis Cloud or Supabase Edge Cache
- **Monitoring**: Vercel Analytics + Error Tracking

---

## 📊 Database Schema

### **Core Tables**
```sql
users (id, email, role, subscription_status, created_at)
profiles (id, handle, platform, followers, bio, last_updated)
posts (id, embed_url, metrics, transcript, date_posted)
boards (id, name, folder_id, public_id, shared, created_at)
folders (id, name, user_id, created_at, updated_at)
follows (user_id, profile_id, created_at, last_refresh)
subscriptions (user_id, plan_id, stripe_id, status, expires_at)
```

### **Relationships**
- Users → Folders (1:many)
- Folders → Boards (1:many)
- Boards → Posts (many:many)
- Users → Follows → Profiles (many:many)
- Users → Subscriptions (1:1)

---

## 🔄 Data Flow Architecture

### **Content Discovery Flow**
1. User searches for creator handle/link
2. API calls ScrapeCreators service
3. Results cached in Redis
4. Posts stored in PostgreSQL
5. Real-time display in Pinterest grid

### **User Authentication Flow**
1. Clerk handles authentication
2. User data synced to PostgreSQL
3. Subscription status checked via Stripe
4. Route protection via middleware
5. Role-based access control

### **Content Organization Flow**
1. User creates folders/boards
2. Posts saved to specific boards
3. Relationships stored in junction tables
4. Public sharing generates unique URLs
5. Real-time updates via optimistic UI

### **Following System Flow**
1. User follows creators during discovery
2. Background job runs daily
3. ScrapeCreators fetches latest posts
4. New content cached and stored
5. Users see fresh content on Following page

---

## 🚀 Performance Optimizations

### **Caching Strategy**
- **Redis**: API responses, search results, session data
- **CDN**: Static assets via Vercel Edge Network
- **Database**: Query optimization and indexing
- **Client**: React Query for client-side caching

### **Loading Optimizations**
- **Lazy Loading**: Pinterest grids and images
- **Code Splitting**: Route-based and component-based
- **Server Components**: Reduced client-side JavaScript
- **Streaming**: Progressive page loading

### **Mobile Optimizations**
- **Responsive Design**: Mobile-first approach
- **Touch Interactions**: Optimized for mobile gestures
- **Performance**: Minimized bundle size
- **PWA Features**: Service worker and caching

---

## 🔒 Security Architecture

### **Authentication Security**
- Clerk-managed user sessions
- JWT token validation
- Role-based access control
- Secure route protection

### **API Security**
- Rate limiting on all endpoints
- Input validation and sanitization
- CORS configuration
- Environment variable protection

### **Data Security**
- PostgreSQL with row-level security
- Encrypted sensitive data
- Secure external API communications
- Regular security audits

---

## 📈 Scalability Considerations

### **Horizontal Scaling**
- Stateless API design
- Database read replicas
- CDN for global distribution
- Microservices-ready architecture

### **Performance Monitoring**
- Real-time error tracking
- Performance metrics
- User analytics
- System health monitoring

### **Future Enhancements**
- GraphQL API layer
- Real-time notifications
- Advanced search capabilities
- AI-powered content recommendations
